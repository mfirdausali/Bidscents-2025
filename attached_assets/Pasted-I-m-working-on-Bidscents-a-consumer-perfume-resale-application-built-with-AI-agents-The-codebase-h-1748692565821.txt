I'm working on Bidscents, a consumer perfume resale application built with AI agents. The codebase has accumulated "spaghetti code" with various redundant variables and unnecessary complexity that needs to be cleaned up while preserving all core functionality.
Primary Objective
Systematically identify and remove redundant variables and code while maintaining 100% functional integrity of the Bidscents app.
Pre-Refactoring Safety Checklist
Before making ANY changes:

Create a complete backup of the current working codebase
Document current functionality - list all working features
Run existing tests to establish baseline behavior
Identify critical user flows (listing, bidding, payments, user auth, etc.)

Analysis Phase Instructions
Step 1: Variable Redundancy Analysis
Identify these specific types of redundant variables:

Duplicate declarations: Same variable declared multiple times in different scopes
Shadow variables: Variables that hide outer scope variables unnecessarily
Dead variables: Assigned but never read or used
Near-duplicate variables: Variables storing essentially the same data with slight variations
Intermediate variables: Used only once between assignment and consumption
Abandoned variables: Left from incomplete features or old iterations

Step 2: Code Pattern Analysis
Look for these redundancy patterns specific to AI-generated code:

Multiple similar functions doing nearly identical operations
Repeated validation logic scattered throughout files
Duplicated API call patterns
Similar state management across components
Redundant error handling blocks
Multiple imports of the same utilities

Step 3: Perfume Domain-Specific Redundancy
Examine Bidscents-specific redundancies:

Duplicate perfume data structures (brand, fragrance notes, sizes, conditions)
Repeated user authentication checks
Similar listing validation across different components
Redundant price calculation logic
Multiple bid tracking mechanisms
Duplicated image handling for perfume photos

Refactoring Strategy
Safe Removal Protocol
For each identified redundant variable/code:

Trace dependencies: Use IDE tools to find all references
Test isolation: Comment out (don't delete) the code first
Run targeted tests: Verify the specific feature still works
Gradual removal: Remove one redundancy at a time, not in batches
Immediate testing: Test after each removal before proceeding

Priority Order (Most to Least Risk)

Start with obvious dead code: Unused imports, commented code blocks
Remove duplicate utilities: Consolidate similar helper functions
Merge redundant state variables: Combine variables tracking same data
Eliminate intermediate variables: Direct assignments where safe
Consolidate similar functions: Merge near-duplicate functions last

Preservation Rules
NEVER remove variables that:

Are used in error handling or logging (even if seemingly redundant)
Appear in configuration objects (may be environment-specific)
Are part of external API contracts
Exist for debugging purposes in development builds
Are used in conditional compilation or feature flags
Store temporary state during async operations

Testing & Validation Protocol
After Each Change

Unit tests: Run tests for the modified component
Integration tests: Test the complete user flow affected
Manual testing: Verify UI behavior matches original
Performance check: Ensure no degradation in load times

Critical Bidscents Flows to Verify

User registration and login
Creating a perfume listing (with photos, description, pricing)
Browsing and searching listings
Placing and managing bids
Payment processing
User profile and listing management
Messaging between buyers/sellers

Red Flags - STOP Immediately If:

Any user flow breaks or behaves differently
Test coverage drops significantly
Build/compilation errors appear
Performance degrades noticeably
External integrations (payment, auth) fail
Mobile responsiveness changes

Documentation Requirements
For each removal, document:

What was removed: Specific variable/function names
Why it was redundant: Brief explanation
Impact: What functionality it might have affected
Rollback plan: How to restore if needed

Final Verification
Before considering the refactoring complete:

Full app regression test: Complete user journey testing
Performance comparison: Before/after metrics
Code review: Have another developer review changes
Staging deployment: Test in production-like environment
Rollback plan: Documented procedure to revert all changes

Output Format
Provide refactoring suggestions in this format:
REDUNDANCY FOUND:
- Location: [file:line]
- Variable/Code: [name]
- Redundancy Type: [dead/duplicate/intermediate/etc.]
- Safe to Remove: [Yes/No with reasoning]
- Replacement Strategy: [how to consolidate or eliminate]
- Risk Level: [Low/Medium/High]
- Required Tests: [specific tests to run after removal]
Success Criteria

Reduced lines of code without functionality loss
Improved code readability and maintainability
Faster build times and better performance
Easier debugging and future development
All original features working identically

Remember: Better to keep seemingly redundant code that serves a purpose than to remove necessary code and break functionality.