These new console logs provide some very important clues! Let's break them down:

Multiple GoTrueClient instances detected...:

Issue: This warning from the Supabase library indicates that createClient (which initializes Supabase) is likely being called multiple times in your frontend code. While not a direct error causing the 500, it's a bad practice that can lead to unpredictable authentication behavior, session conflicts, or issues with real-time subscriptions.
Action: Ensure you are initializing the Supabase client only once in your application, typically in a dedicated file like FragranceMarketplace 2/client/src/lib/supabase.ts. Then, import this single instance wherever needed (e.g., in use-auth.tsx, auth-callback.tsx, etc.). Avoid calling createClient inside React components or multiple custom hooks.
üîÑ Processing email verification: Object followed by ‚ùå Invalid verification parameters:

Critical Issue: This is a significant finding. It means that when your application's callback page (likely FragranceMarketplace 2/client/src/pages/auth-callback.tsx which handles the redirect from the email verification link) tried to process the parameters from the URL (e.g., the verification token, type, etc., usually found in the URL fragment like #access_token=...&type=verify), the Supabase JS client itself determined these parameters were invalid or malformed.
This could happen before an attempt to exchange the token with the Supabase server, or it could be that the parameters are so malformed the client can't even construct a proper request.
Possible Causes for "Invalid verification parameters":
The emailRedirectTo URL specified in your supabase.auth.signUp options might be incorrect, missing, or getting corrupted (e.g., due to improper URL encoding or other query parameters interfering).
The structure of the URL fragment that Supabase adds to your emailRedirectTo URL might be incomplete or altered.
Action:
Log the Full URL: On your verification callback page (e.g., auth-callback.tsx), at the very beginning of its execution (e.g., in a useEffect hook that runs once), log console.log('Verification URL:', window.location.href);. Then, click a new verification link and inspect this logged URL carefully, especially the part after the #. It should typically contain parameters like access_token, refresh_token, expires_in, token_type, and type (which might be signup, recovery, or magiclink).
Verify emailRedirectTo: Double-check the emailRedirectTo URL you are setting in the supabase.auth.signUp({ options: { emailRedirectTo: '...' } }) call. Ensure it's an absolute URL, correctly configured, and whitelisted in your Supabase Dashboard under "Authentication" -> "URL Configuration" -> "Redirect URLs".
Supabase auth state changed: SIGNED_IN:

This is interesting because it appears after "Invalid verification parameters." It suggests that despite the parameter issue, a Supabase session was somehow established or detected. This could be the new session from the (partially successful?) verification, or perhaps an existing session being recognized. The "Invalid verification parameters" might relate specifically to the type of verification link not being fully processed, even if an access token was present in the URL.
üîÑ Frontend: Starting token exchange with Supabase token and the subsequent Failed to load resource: the server responded with a status of 500 () for /api/v1/auth/session, followed by ‚ùå Frontend: Token exchange request failed: Error: 500: {"error":"Internal server error"}:

Confirmation: This sequence confirms our previous diagnosis. After a Supabase session is noted (SIGNED_IN), your auth-callback.tsx attempts to call your application's backend endpoint /api/v1/auth/session. This backend endpoint is then failing with an internal server error.
The "Invalid verification parameters" logged earlier could be a contributing factor: if the Supabase session established is incomplete or has issues due to the faulty verification parameters, it might cause problems when your backend's /api/v1/auth/session tries to validate this session or fetch user details.
Revised Explanation & Advice:

The "Verification failed" message appears because, although Supabase might have marked the email as verified (allowing later login), the immediate process of establishing a full, application-recognized session on your verification callback page is failing.

There are likely two issues at play:

Client-Side - Invalid Verification Parameters: The Supabase client library itself is reporting that the parameters in the URL from the verification email link are invalid. This needs to be fixed first as it could be the root cause or a major contributing factor to subsequent errors.
Server-Side - 500 Error from /api/v1/auth/session: Your application's backend endpoint is encountering an internal error when trying to process the Supabase token and issue an application-specific token.
Recommended Steps to Resolve:

Fix "Invalid verification parameters" (Client-Side Priority):

Inspect the Verification URL: In your FragranceMarketplace 2/client/src/pages/auth-callback.tsx (or the page emailRedirectTo points to), add console.log('Full verification URL:', window.location.href); at the very top of a useEffect hook that runs once. Click a fresh verification link and examine this URL. Pay close attention to the fragment (the part after #). It should look something like: #access_token=your_token&expires_in=3600&refresh_token=your_refresh_token&token_type=bearer&type=recovery (the type might vary, e.g., signup). Ensure no parts are missing or look corrupted.
Verify emailRedirectTo in supabase.auth.signUp: Review the options.emailRedirectTo in your FragranceMarketplace 2/client/src/hooks/use-auth.tsx (in the registerWithVerificationMutation). It must be an absolute URL (e.g., https://your-app.com/auth-callback) and must exactly match one of the URLs in your Supabase Dashboard's "Redirect URLs" list.
Ensure no special characters in your redirect URL are causing issues or that it's not being inadvertently double-encoded.
Fix "Multiple GoTrueClient instances detected" (Client-Side Housekeeping):

Go through your client-side code, especially FragranceMarketplace 2/client/src/lib/supabase.ts, FragranceMarketplace 2/client/src/hooks/use-auth.tsx, FragranceMarketplace 2/client/src/hooks/use-supabase-auth.tsx, and FragranceMarketplace 2/client/src/pages/auth-callback.tsx.
Ensure createClient from @supabase/supabase-js is called only once (typically in lib/supabase.ts) and that this single instance is exported and imported elsewhere.
Diagnose and Fix the 500 Error in /api/v1/auth/session (Server-Side):

Check Server Logs: This is still crucial. The console.error('Session creation error:', error); in FragranceMarketplace 2/server/app-auth.ts within the authRoutes.session function holds the key. Find this log on your server output when the 500 error occurs. It will show the specific underlying error (e.g., database issue, error in storage.ts methods, user.email being null, user_metadata issues).
Defensive Coding: Based on the server log, add more checks in authRoutes.session (e.g., for supabaseUser && supabaseUser.email, and for expected user_metadata fields before accessing them).
storage.ts Review: Examine storage.getUserByEmail and storage.createUser in FragranceMarketplace 2/server/storage.ts for potential bugs when dealing with newly verified users or missing metadata.
Start by thoroughly investigating the "Invalid verification parameters" and logging the full verification URL. This might reveal why the Supabase client is unhappy, which could simplify debugging the subsequent 500 error.