1. Project Context & Imperative:

The FragranceMarketplace application's current authentication system is a complex amalgamation of multiple strategies. This is evident across several server-side files which have created redundancy, maintainability challenges, and security concerns.

The directive is to refactor and redesign the entire authentication system to use Supabase as the sole and exclusive Identity Provider (IdP). All other authentication mechanisms and their specific files must be deprecated and removed. The goal is a single, secure, robust, and maintainable authentication architecture.

2. Mandated Architecture & Strategy:

Exclusive Identity Provider (IdP): Supabase is the only system responsible for:
User registration (email/password, OAuth providers like Facebook).
User login and credential validation.
OAuth flows.
Email verification.
Password reset.
Application Backend Role: The FragranceMarketplace backend:
Trusts Supabase: It will verify authentication status established by Supabase (e.g., by validating a Supabase JWT).
Issues Application-Specific JWTs: Upon successful verification of Supabase authentication, the backend will issue its own JWT. This application JWT will be used to authorize access to the FragranceMarketplace's internal APIs.
Manages Local User Profiles: Maintains application-specific user data in the local database, securely linked to the Supabase User ID.
Session Management: The application API will be stateless, relying on the application-specific JWTs. All forms of server-side session persistence (like express-session and memorystore) and their related files must be removed.
Outcome: A singular, streamlined authentication flow: Client <-> Supabase (for IdP operations) <-> Client <-> Application Backend (with Application JWT for API access).
3. Key Refactoring Tasks & Deliverables (Highlighting Files for Removal/Major Refactor):

A. Radical Code Simplification & File Removal/Overhaul:

Action: DELETE the following server-side authentication files entirely. Their functionality is either redundant with Supabase as the sole IdP or will be consolidated into a new, singular application authentication module:
uploaded:FragranceMarketplace/server/auth.ts (complex Passport.js session-based system)
uploaded:FragranceMarketplace/server/simple-auth.ts (simplified Passport.js session-based system)
uploaded:FragranceMarketplace/server/supabase-auth.ts (another Passport.js variant with Supabase)
Action: REMOVE all Passport.js dependencies from package.json and configurations throughout the server.
Action: ELIMINATE all express-session usage and related dependencies (e.g., memorystore, connect-pg-simple if any were used, check uploaded:FragranceMarketplace/server/supabase-session-store.ts for session store logic that needs removal if tied to express-session).
Action: REFACTOR uploaded:FragranceMarketplace/server/simple-jwt-auth.ts (or create a new, focused module, e.g., server/appAuth.ts). This module will become the central piece for the new strategy:
Receiving and validating Supabase JWTs (or other Supabase-issued authentication proofs from the client).
Issuing and verifying application-specific JWTs, likely using refined utilities from uploaded:FragranceMarketplace/server/jwt.ts.
Action: REVIEW and REFINE uploaded:FragranceMarketplace/server/jwt.ts to ensure it robustly supports the application-specific JWT lifecycle (generation, secure signing, verification, claim management).
B. Standardized Backend API Endpoints for Application JWT Issuance:

Action: Design and implement a clean, RESTful set of API endpoints within the new application auth module (e.g., server/appAuth.ts or the refactored server/simple-jwt-auth.ts), for example:
POST /api/v1/auth/session: Client sends a valid Supabase-issued JWT. Backend validates it, finds/creates the local user profile, and returns an application-specific JWT.
POST /api/v1/auth/logout: Implements application JWT blocklisting (if strategy adopted).
GET /api/v1/auth/me: Returns user profile based on validated application JWT.
Note: Endpoints for direct user registration and login with passwords via the backend API are removed; these actions are handled by the Supabase client SDK directly. OAuth callbacks (uploaded:FragranceMarketplace/client/src/pages/auth-callback.tsx) will interface with Supabase SDK first, then the client will use the resulting Supabase session/JWT to call /api/v1/auth/session.
C. Robust Local User Profile Management & Supabase Linking:

(No specific file removal, but impacts uploaded:FragranceMarketplace/server/storage.ts or DB interaction layer)
Action: Ensure local users table schema (defined in uploaded:FragranceMarketplace/shared/schema.ts) correctly supports providerId (Supabase User ID) and provider.
Action: Implement secure, idempotent functions (likely within your new app auth module or data storage layer) for finding or creating local user profiles linked to Supabase User IDs.
D. Application-Specific JWT Lifecycle Management:

(Primarily impacts the new app auth module and uploaded:FragranceMarketplace/server/jwt.ts)
Action: Implement secure generation, signing, verification, claim definition, expiration, and revocation (blocklisting) for application JWTs.
E. Client-Side Adaptation:

Action: SIGNIFICANTLY REFACTOR uploaded:FragranceMarketplace/client/src/hooks/use-auth.tsx:
Remove logic related to multiple backend auth strategies/endpoints.
Primarily use Supabase client SDK (uploaded:FragranceMarketplace/client/src/lib/supabase.ts) for IdP operations.
Implement the call to /api/v1/auth/session to exchange Supabase JWT for application JWT.
Manage application JWT for API requests.
Action: SIMPLIFY uploaded:FragranceMarketplace/client/src/pages/auth-page.tsx and uploaded:FragranceMarketplace/client/src/pages/auth-callback.tsx to align with the Supabase SDK-first approach.
F. Security & Authorization Integrity:

(Impacts how routes are protected, potentially uploaded:FragranceMarketplace/server/routes.ts and client-side uploaded:FragranceMarketplace/client/src/lib/protected-route.tsx)
Action: Ensure application API endpoints are protected by middleware that validates the application JWT.
Action: Server-side business logic authorization is paramount. Client-side checks in protected-route.tsx are for UX only.
G. System Hygiene (Logging, Error Handling, Documentation):

Action: Implement structured logging across the new auth module.
Action: UPDATE/REPLACE uploaded:FragranceMarketplace/docs/SUPABASE_AUTHENTICATION_SECURITY.md and uploaded:FragranceMarketplace/SECURITY_UPDATE.md with new documentation reflecting the unified and simplified architecture.
4. Non-Negotiable Quality Attributes:

Sole IdP Principle: Supabase is the only authority for user identity verification.
Security: Ironclad protection.
Simplicity & Maintainability: Drastically simpler, well-documented, easy to maintain.
Reliability: Robust error handling.
Performance: Efficient token operations.