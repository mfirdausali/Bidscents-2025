import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Card, CardContent } from "@/components/ui/card";
import { useCurrency } from "@/lib/currency";
import { useCreateTrip, calculateTripFinancials } from "@/lib/trips";
import { TripFormData, CalculatedTripData } from "@shared/types";
import { Loader2 } from "lucide-react";

// ... keep your schema and options definitions

const tripFormSchema = z.object({
  name: z.string().min(1, "Trip name is required"),
  startDate: z.string().min(1, "Start date is required"),
  endDate: z.string().min(1, "End date is required"),
  destination: z.string().min(1, "Destination is required"),
  packageType: z.string().min(1, "Package type is required"),
  transportation: z.array(z.string()).min(1, "Select at least one mode of transportation"),
  participants: z.coerce.number().int().min(1, "Number of participants must be at least 1"),
  currency: z.string().min(1, "Currency is required"),
  invoicedPrice: z.object({
    accommodation: z.coerce.number().min(0),
    meals: z.coerce.number().min(0),
    transport: z.coerce.number().min(0),
    guide: z.coerce.number().min(0),
    activities: z.coerce.number().min(0),
    admin: z.coerce.number().min(0),
  }),
  expenses: z.object({
    accommodation: z.coerce.number().min(0),
    meals: z.coerce.number().min(0),
    transport: z.coerce.number().min(0),
    guide: z.coerce.number().min(0),
    activities: z.coerce.number().min(0),
    admin: z.coerce.number().min(0),
  }),
});

export function TripForm({ onSuccess }: { onSuccess?: () => void }) {
  const [financials, setFinancials] = useState<CalculatedTripData>({
    revenue: 0,
    costs: 0,
    profit: 0,
    margin: 0,
    pricePerPerson: 0,
  });

  const { currency, currencies, format } = useCurrency();
  const { mutate: createTrip, isPending } = useCreateTrip();

  const today = new Date().toISOString().split("T")[0];

  const form = useForm({
    resolver: zodResolver(tripFormSchema),
    defaultValues: {
      name: "",
      startDate: today,
      endDate: today,
      destination: "",
      packageType: "",
      transportation: [],
      participants: 1,
      currency: "MYR",
      invoicedPrice: {
        accommodation: 0,
        meals: 0,
        transport: 0,
        guide: 0,
        activities: 0,
        admin: 0,
      },
      expenses: {
        accommodation: 0,
        meals: 0,
        transport: 0,
        guide: 0,
        activities: 0,
        admin: 0,
      },
    },
  });

  // ✅ FIXED: use subscription-based watch to always get up-to-date values
  useEffect(() => {
    const subscription = form.watch((values) => {
      const calculated = calculateTripFinancials(
        values.invoicedPrice,
        values.participants,
        values.expenses
      );
      setFinancials(calculated);
    });
    return () => subscription.unsubscribe();
  }, [form]);

  // ✅ Date validation stays
  useEffect(() => {
    const startDate = form.getValues("startDate");
    const endDate = form.getValues("endDate");

    if (startDate && endDate && new Date(endDate) < new Date(startDate)) {
      form.setError("endDate", {
        type: "manual",
        message: "End date must be after start date",
      });
    }
  }, [form.watch("startDate"), form.watch("endDate")]);

  function onSubmit(values: z.infer<typeof tripFormSchema>) {
    createTrip(values, {
      onSuccess: () => {
        if (onSuccess) onSuccess();
        form.reset();
      },
    });
  }

  return (
    <Form {...form}>
      {/* ... keep your form layout as-is */}
    </Form>
  );
}
