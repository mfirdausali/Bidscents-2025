now hook up the image upload in the add new product dialog to the ProductImageBucket that i just made for the Object Storage so the images uploaded is stored there. Use replit's builtin object storage using the replit/object-storage package.

implement it in this way
0. create a table that stores the id for each image and references the product id in the products table.

create a unique id for each image the seller uploads based on the product/seller name and whatever
upload the images to replit's object storage using the id generated
add a row to the db for each image uploaded with the image id and product id it is connected to
when the image is needed e.g. rendering the product card/product details page, use the table to find the associated image id's for the product, pull it from the object storage using the id
here is the documentation for the object storage if you need it. do not, under any circumstances provide a hacky temporary non-working solution. If you encounter any error, let me know first and I'll think about what to do

Follow this guide to set up the Object Storage TypeScript SDK and perform basic operations like adding, retrieving, listing, and deleting Objects in your Bucket.

​
Setup a Client

Create a new client instance without any parameters:

Copy
import { Client } from '@replit/object-storage';
const client = new Client();
​
Add an Object

Upload an Object by providing its name and contents:

Copy
const { ok, error } = await client.uploadFromText('file.txt', "Hello World!")
if (!ok) {
// ... handle the error ...
}
​
Get an Object

Retrieve an Object’s contents as text:

Copy
const { ok, value, error } = await client.downloadAsText('file.txt');
if (!ok) {
// ... handle the error ...
}
console.log(value);
// > "Hello World!"
​
List the Objects in the Bucket

List all Objects within the Bucket:

Copy
const { ok, value, error } = await client.list();
if (!ok) {
// ... handle the error ...
}
console.log(value);
// > [{ name: 'file.txt' }]
​
Delete an Object

Delete an Object from the Bucket:

Copy
const { ok, error } = await client.delete("file.txt");
if (!ok) {
// ... handle the error ...
}